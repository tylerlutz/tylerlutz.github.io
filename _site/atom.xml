<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Tyler Lutz</title>
 <link href="http://tylerlutz.github.io/atom.xml" rel="self"/>
 <link href="http://tylerlutz.github.io/"/>
 <updated>2016-02-24T13:38:38-05:00</updated>
 <id>http://tylerlutz.github.io</id>
 <author>
   <name>Tyler Lutz</name>
   <email></email>
 </author>

 
 <entry>
   <title>NodeJS - What is it?</title>
   <link href="http://tylerlutz.github.io/tutorials/2016/02/24/nodejs/"/>
   <updated>2016-02-24T13:00:00-05:00</updated>
   <id>http://tylerlutz.github.io/tutorials/2016/02/24/nodejs</id>
   <content type="html">&lt;p&gt;This post was created to explain to you the concepts of NodeJS and tell you what exactly NodeJS is and what it can be used for. We will answer three basic questions; What is NodeJS, What makes NodeJS different?, and What is non blocking?. 
&lt;br /&gt;
&lt;br /&gt;
NodeJS is a server side language built on Google Chromeâ€™s V8 JavaScript Engine. NodeJS is a cross platform is a cross-platform runtime environment that can be ran on Linux, Mac OS X, and Windows. NodeJS is a simply server-side JavaScript that can be used for many different use-cases but the large advantage to Node is that Node can scale very well. Node is scalable due to the fact that it can handle concurrency very well, meaning that if 100 request hit the server at once but the task should only take 2 seconds, then each request should be completed in two seconds. This is different from other server-side languages which would take a request, wait 2 seconds, and then do the next request. 
&lt;br /&gt;
&lt;br /&gt;
Other than the scalability of Node, there are many other reasons that makes Node different from other programming languages. The big differences is that Node is built on JavaScript, Node is simply JavaScript for the server. This makes it a lot easier for the developer to write code because what they can write for the browser, can most likely be used on the server side and vise versa. This concept alone is what is making Node so popular, it is so much easier on the developer. But the scalability of Node and its efficiency is what makes it so much different from other languages. For example, a request is made to a web server to get data from a JSON file, other languages would be waiting for the response from the JSON file, while Node would be working on the next steps or an entirely different request while that file is fetched. This allows resources to be more efficient by working ahead or on a different request instead of idling while that single request is being processed. 
&lt;br /&gt;
&lt;br /&gt;
The example below was taken from a stackoverflow thread illustrating the difference between Blocking and Non-Blocking.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Blocking: 1,... 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Non-blocking: 1, 3,... 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;example.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Node is a non-blocking language. It continues to work while another task is being completed in the background. As you can see in the example above, the blocking code alerts 1 then waits to alert 2 while the non-blocking code alerts 1, then starts to work on the fetch statement, but goes on to alert 3 while it is waiting for the fetch statement to be completed. Why is this important? Other languages that use the blocking concept are not using all of their resources efficiently i.e. the CPU and RAM. These resources go into idle while waiting for the task to complete. Non-blocking languages allow the program to continue and allows the CPU and Memory to work on other tasks while waiting for that fetch statement to conclude. This allows the program to better utilize the resources and becomes more efficient because there is less idle time in the program.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>AngularJS Basics</title>
   <link href="http://tylerlutz.github.io/tutorials/2016/02/08/angularjs-basics/"/>
   <updated>2016-02-08T21:45:50-05:00</updated>
   <id>http://tylerlutz.github.io/tutorials/2016/02/08/angularjs-basics</id>
   <content type="html">&lt;p&gt;This tutorial was created to show you the basics of using AngularJS. This simple web application uses a corresponding JSON file for all of its data. The JSON file can be downloaded from the GitHub repository which can be found at the bottom of this tutorial. To help better explain the tutorial, we will show code snippets and images of the application. For better understanding, clone the GitHub repository located at the bottom of this tutorial. Lets get started!
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;

&lt;p&gt;Before getting started, there are several requirements needed. These requirements are listed below and can be obtained by using Bower. To use Bower, Node Package Manager(npm) needs to be installed onto your system. To install npm, follow &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Bootstrap&lt;/li&gt;
	&lt;li&gt;AngularJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install bootstrap, open up your bash terminal, navigate to your project directory and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bower install bootstrap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
To install AngularJS, open up your bash terminal, navigate to your project directory and type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bower install angular&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
After the requirements are installed into the generated bower_components, we need to create our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file and link bootstrap and angular.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- CSS Section --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bower_components/bootstrap/dist/css/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/style.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- JavaScrip Section --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bower_components/angular/angular.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Setting Up Angular&lt;/h3&gt;

&lt;p&gt;Next we need to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file that will contain most of our AngularJS code. To do this, we need to create a function that contains a module called tutorialLists.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tutorialLists&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
We need to link the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file in our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file in our Javascripts section.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./app.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
To let Angular know that we want to use the newly created &lt;code class=&quot;highlighter-rouge&quot;&gt;tutorialList&lt;/code&gt; module, we need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-app=&quot;tutorialList&quot;&lt;/code&gt; inside our opening heml tag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tutorialLists&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
To test that Angular is working, lets create a header for our web application within our body tags that takes two strings, &lt;code class=&quot;highlighter-rouge&quot;&gt;AngularJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tutorials&lt;/code&gt;,  and combines them together and to print to the page.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{&quot;AngularJS &quot; + &quot;Tutorials&quot;}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The results of this line are shown in the image below.
&lt;img src=&quot;img/angularHeader.png&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Creating HTML Container&lt;/h3&gt;

&lt;p&gt;Next we need to create a container that will house the information for each tutorial. This container will display the image of the artist, the title of the tutorial in an &lt;code class=&quot;highlighter-rouge&quot;&gt;h3&lt;/code&gt; tag, the artist name, and a link to the tutorial. A description of the code will follow after the code snippet.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-6 col-md-4 tutorialContainer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{tutorial.image}}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;writerImage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{{tutorial.title}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;positionBottom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;By: {{tutorial.author}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{tutorial.url}}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tutorialLink&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click Here for Tutorial&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; is created to contain all of the tutorials information. The image is then placed at the center of the div which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-src=&quot;{{tutorial.image}}&quot;&lt;/code&gt; to generate the image. An &lt;code class=&quot;highlighter-rouge&quot;&gt;h3&lt;/code&gt; tag is then used to get the tutorialâ€™s title using &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{tutorial.title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Another &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; container is used to hold the authors name, and link to the tutorial that uses a custom css style to position the container in the bottom left corner of the main container. The authors name is generated by using &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{tutorial.author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Finally the link is generated using an anchor tag that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-href=&quot;{{tutorial.url}}&quot;&lt;/code&gt; to get the source. After we populate the containers using Angular, they should be similar to the example below. &lt;br /&gt;
&lt;img src=&quot;img/tutorialContainer.png&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Populating Tutorial Containers Part 1: AngularJS&lt;/h3&gt;

&lt;p&gt;To populate the tutorial containers, we first need to open our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file, we need to create a Angular controller named &lt;code class=&quot;highlighter-rouge&quot;&gt;TutorialController&lt;/code&gt; that uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; core Angular service that we will use to pull the JSON data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;TutorialController&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$http&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Within our &lt;code class=&quot;highlighter-rouge&quot;&gt;TutorialController&lt;/code&gt;, we need to create a variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;tutorials&lt;/code&gt; and set it to equal &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tutorials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Next, we are going to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;$http.get&lt;/code&gt; method that will populate a list inside of our &lt;code class=&quot;highlighter-rouge&quot;&gt;tutorials&lt;/code&gt; variable from the specified JSON file. This function will only populate the list if the &lt;code class=&quot;highlighter-rouge&quot;&gt;$http.get&lt;/code&gt; method is successful, otherwise it will do nothing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;json/tutorials.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;tutorials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
The final result for the &lt;code class=&quot;highlighter-rouge&quot;&gt;TutorialController&lt;/code&gt; should be this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;TutorialController&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$http&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tutorials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;json/tutorials.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;tutorials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Populating Tutorial Containers Part 2: HTML&lt;/h3&gt;

&lt;p&gt;We now need to connect our &lt;code class=&quot;highlighter-rouge&quot;&gt;TutorialController&lt;/code&gt; to our HTML by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-controller&lt;/code&gt; directive inside our opening &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag. We will also give the controller an alias called &lt;code class=&quot;highlighter-rouge&quot;&gt;tutorialCtrl&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TutorialController as tutorialCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Next, we want to create a tutorial container for each tutorial in the list. To do this we will add the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat&lt;/code&gt; directive inside our main &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; of our tutorial container that creates a new container for each of the tutorials inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonList&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-6 col-md-4 tutorialContainer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tutorial in tutorialCtrl.jsonList&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
You should now be able to run the application in your bowser and the list of tutorials will be populated from the JSON file. &lt;br /&gt;
&lt;img class=&quot;responsive-image&quot; src=&quot;img/tutorialsList.png&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Adding Search&lt;/h3&gt;

&lt;p&gt;Finally we want to be able to search the tutorials using AngularJS. To do this, we first need to add a textbox to the webpage using the input tag. Inside that input tag, we need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-model&lt;/code&gt; directive and set the model name to &lt;code class=&quot;highlighter-rouge&quot;&gt;searchTutorials&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-control&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;searchTutorials&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search Tutorials&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;img/tutorialsSearch.png&quot; /&gt;
&lt;br /&gt;
To sync up the &lt;code class=&quot;highlighter-rouge&quot;&gt;searchTutorials&lt;/code&gt; model to the list of tutorials, we need to add the filter property to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat&lt;/code&gt; directive by using a pipe.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-sm-6 col-md-4 tutorialContainer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tutorial in tutorialCtrl.jsonList | filter:searchTutorials&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;This tutorial is finally complete. You now have a simple AngularJS web application that pulls data from an external JSON file and displays it to a web page. The list is also searchable using the power of AngularJS filters. To view the source code in its entirety, view the &lt;a href=&quot;https://github.com/tylerlutz/AngularJSAssignment5Part1&quot; target=&quot;_blank&quot;&gt;GitHub repo&lt;/a&gt;. For more information on AngularJS, check out the &lt;a href=&quot;https://docs.angularjs.org/&quot; target=&quot;_blank&quot;&gt;AngularJS Doc&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 

</feed>
